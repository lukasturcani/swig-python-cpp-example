#!/usr/bin/env python

import collections
import pathlib
import shutil


def main() -> None:

    package_path = pathlib.Path(__file__).parent / "wrappedcpp"
    package_src = package_path / "src" / "wrappedcpp"
    bazel_src = pathlib.Path(__file__).parent / "bazel-bin" / "src"

    _set_up_src_directory(package_src)
    _copy_python_files(bazel_src, package_src)


def _set_up_src_directory(
    path: pathlib.Path,
) -> None:

    shutil.rmtree(path, ignore_errors=True)
    path.mkdir(parents=True, exist_ok=True)
    path.joinpath("__init__.py").touch()


def _copy_python_files(
    src: pathlib.Path,
    dst: pathlib.Path,
) -> None:

    init_file_modules: dict[pathlib.Path, list[str]]
    init_file_modules = collections.defaultdict(list)

    for path in src.rglob("*.py"):
        directory_stem = path.parts[len(src.parts):-2]
        new_directory = dst.joinpath(*directory_stem)
        new_directory.mkdir(parents=True, exist_ok=True)
        shutil.copyfile(path, new_directory / path.name)
        module_name = path.name.replace(".py", "")
        so_name = f'_{module_name}.so'
        shutil.copyfile(path.parent / so_name, new_directory / so_name)
        init_file_modules[new_directory / "__init__.py"].append(
            module_name,
        )
    _create_init_files(init_file_modules)

def _create_init_files(
    init_file_modules: dict[pathlib.Path, list[str]],
) -> None:

    for path, modules in init_file_modules.items():
        path.touch()
        with open(path, "w") as f:
            f.write(
                "\n".join(
                    f"from . import {module}" for module in modules
                ),
            )


if __name__ == "__main__":
    main()
